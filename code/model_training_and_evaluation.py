# -*- coding: utf-8 -*-
"""Model_training_and_evaluation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ow97bYEY96HMFPNoK6jdRlEr0DmwZdXl
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score





def feature_correlation(df):

    # Load dataset
#  df = pd.read_csv("/content/augmented_data.csv")  # Update path if necessary

  # Compute Pearson correlation matrix
  correlation_matrix = df.corr(numeric_only=True, method='pearson')

  # Display correlation with 'Amount'
  correlation_with_amount = correlation_matrix['Amount'].sort_values(ascending=False)
  print("Pearson Correlation with Auction Amount:\n")
  print(correlation_with_amount)

  # Visualize using heatmap
  plt.figure(figsize=(8, 6))
  sns.heatmap(correlation_matrix[['Amount']].sort_values(by='Amount', ascending=False), annot=True, cmap='coolwarm')
  plt.title('Pearson Correlation with Auction Amount')
  plt.show()






  def train_test_split_model_training(df):

  # Define features and target
  features = ['Batting_Average', 'Average_StrikeRate', 'Four', 'Six']
  target = 'Amount'

  X = df[features]
  y = df[target]


  # Split data into training and test sets
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)


  # Apply StandardScaler to features
  scaler = StandardScaler()
  X_train_scaled = scaler.fit_transform(X_train)
  X_test_scaled = scaler.transform(X_test)



  # Define models
  models = {
      'Linear Regression': LinearRegression(),
      'Random Forest': RandomForestRegressor(random_state=1),
      'XGBoost': XGBRegressor(random_state=1, verbosity=0)
  }




  # Train and evaluate each model
  results = {}

  for name, model in models.items():
      model.fit(X_train_scaled, y_train)
      y_pred = model.predict(X_test_scaled)

      mse = mean_squared_error(y_test, y_pred)
      rmse = np.sqrt(mse)
      mae = mean_absolute_error(y_test, y_pred)
      r2 = r2_score(y_test, y_pred)

      results[name] = {
          'R2 Score': r2,
          'MAE': mae,
          'RMSE': rmse
      }



      # Display evaluation metrics
  results_df = pd.DataFrame(results).T
  print("\nModel Evaluation Results with StandardScaler:\n")
  print(results_df)